generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email        String     @id
  passwordHash String
  nickname     String     @unique
  silverChip   Int        @default(1200)
  goldChip     Int        @default(1200)
  createdAt    DateTime   @default(now())
  rooms        RoomUser[]
}

model Channel {
  id    Int    @id @default(autoincrement())
  name  String @unique
  rooms Room[]
}

model Room {
  id        Int           @id @default(autoincrement())
  channelId Int
  name      String
  status    String
  createdAt DateTime      @default(now())
  histories GameHistory[]
  channel   Channel       @relation(fields: [channelId], references: [id])
  users     RoomUser[]

  @@index([channelId], map: "Room_channelId_fkey")
}

model RoomUser {
  id     Int    @id @default(autoincrement())
  roomId Int
  userId String
  seat   Int
  room   Room @relation(fields: [roomId], references: [id])
  user   User @relation(fields: [userId], references: [email])

  @@index([roomId], map: "RoomUser_roomId_fkey")
  @@index([userId], map: "RoomUser_userId_fkey")
}

model GameHistory {
  id        Int       @id @default(autoincrement())
  roomId    Int
  startedAt DateTime
  endedAt   DateTime?
  room      Room      @relation(fields: [roomId], references: [id])

  @@index([roomId], map: "GameHistory_roomId_fkey")
}

model SpecialCard {
  id                String   @id
  name              String
  description       String?
  descriptionKo     String?  @db.Text
  descriptionId     String?  @db.Text
  descriptionEn     String?  @db.Text
  price             Int      @default(0)
  sprite            Int      @default(0)
  type              String   @default("Joker")
  basevalue         Float?   @default(0)
  increase          Float?   @default(0)
  decrease          Float?   @default(0)
  maxvalue          Int?     @default(0)
  need_card_count   Int?     @default(0)
  enhanceChips      Int?     @default(0)
  enhanceMul        Float?   @default(0)
  isActive          Boolean  @default(true)
  
  // 2개 고정 조건-효과 시스템 필드들
  // 첫 번째 조건-효과 쌍
  conditionType1     String?  // 조건 타입
  conditionValue1    String?  // 조건 값
  conditionOperator1 String?  // 조건 연산자
  conditionNumeric1  Int?     // 조건 숫자 값
  effectTiming1      String?  // 효과 타이밍
  effectType1        String?  // 효과 타입
  effectTarget1      String?  // 효과 표시 대상 (Card/Joker)
  
  // 두 번째 조건-효과 쌍
  conditionType2     String?  // 조건 타입
  conditionValue2    String?  // 조건 값
  conditionOperator2 String?  // 조건 연산자
  conditionNumeric2  Int?     // 조건 숫자 값
  effectTiming2      String?  // 효과 타이밍
  effectType2        String?  // 효과 타입
  effectTarget2      String?  // 효과 표시 대상 (Card/Joker)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([id], map: "SpecialCard_id_key")
}

model GameSetting {
  id                    String   @id
  name                  String   @unique
  value                 String   @db.Text // JSON 형태로 저장
  description           String?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([id], map: "GameSetting_id_key")
}

model Feedback {
  id          String   @id @default(cuid())
  content     String   @db.Text
  author      String   // 작성자 (이메일 또는 닉네임)
  assignee    String?  // 담당자 (처리할 개발자)
  parentId    String?  // 답글인 경우 부모 댓글 ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 답글 관계
  parent      Feedback? @relation("FeedbackReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Feedback[] @relation("FeedbackReplies")

  @@index([parentId])
}
