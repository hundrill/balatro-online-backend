generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email               String?    @unique
  passwordHash        String
  nickname            String     @unique
  createdAt           DateTime   @default(now())
  goldChip            Int        @default(1200)
  silverChip          Int        @default(1200)
  piggyBankClaimCount Int        @default(0)
  challengeProgress   String?
  userId              String     @id
  rooms               RoomUser[]
}

model Channel {
  id    Int    @id @default(autoincrement())
  name  String @unique
  rooms Room[]
}

model Room {
  id        Int           @id @default(autoincrement())
  channelId Int
  name      String
  status    String
  createdAt DateTime      @default(now())
  histories GameHistory[]
  channel   Channel       @relation(fields: [channelId], references: [id])
  users     RoomUser[]

  @@index([channelId], map: "Room_channelId_fkey")
}

model RoomUser {
  id     Int    @id @default(autoincrement())
  roomId Int
  userId String
  seat   Int
  room   Room   @relation(fields: [roomId], references: [id])
  user   User   @relation(fields: [userId], references: [userId])

  @@index([roomId], map: "RoomUser_roomId_fkey")
  @@index([userId], map: "RoomUser_userId_fkey")
}

model GameHistory {
  id        Int       @id @default(autoincrement())
  roomId    Int
  startedAt DateTime
  endedAt   DateTime?
  room      Room      @relation(fields: [roomId], references: [id])

  @@index([roomId], map: "GameHistory_roomId_fkey")
}

model SpecialCard {
  id                 String   @id
  name               String
  price              Int      @default(0)
  roundProb1         Int?     @default(0)
  roundProb2         Int?     @default(0)
  roundProb3         Int?     @default(0)
  roundProb4         Int?     @default(0)
  roundProb5         Int?     @default(0)
  basevalue          Float?   @default(0)
  increase           Float?   @default(0)
  decrease           Float?   @default(0)
  maxvalue           Int?     @default(0)
  need_card_count    Int?     @default(0)
  enhanceChips       Int?     @default(0)
  enhanceMul         Float?   @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  sprite             Int      @default(0)
  isActive           Boolean  @default(true)
  type               String   @default("Joker")
  conditionNumeric1  String?
  conditionNumeric2  String?
  conditionOperator1 String?
  conditionOperator2 String?
  conditionType1     String?
  conditionType2     String?
  conditionValue1    String?
  conditionValue2    String?
  effectType1        String?
  effectType2        String?
  effectTarget1      String?
  effectTarget2      String?
  effectTiming1      String?
  effectTiming2      String?
  descriptionId      String?  @db.Text
  descriptionKo      String?  @db.Text
  descriptionEn      String?  @db.Text
  effectValue1       String?
  effectValue2       String?
  conditionNumeric3  String?
  conditionNumeric4  String?
  conditionNumeric5  String?
  conditionOperator3 String?
  conditionOperator4 String?
  conditionOperator5 String?
  conditionType3     String?
  conditionType4     String?
  conditionType5     String?
  conditionValue3    String?
  conditionValue4    String?
  conditionValue5    String?
  effectTarget3      String?
  effectTarget4      String?
  effectTarget5      String?
  effectTiming3      String?
  effectTiming4      String?
  effectTiming5      String?
  effectType3        String?
  effectType4        String?
  effectType5        String?
  effectValue3       String?
  effectValue4       String?
  effectValue5       String?
  effectByCount1     Boolean?
  effectByCount2     Boolean?
  effectByCount3     Boolean?
  effectByCount4     Boolean?
  effectByCount5     Boolean?

  @@index([id], map: "SpecialCard_id_key")
}

model GameSetting {
  id          String   @id
  name        String   @unique
  value       String   @db.Text
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([id], map: "GameSetting_id_key")
}

model Feedback {
  id        String     @id @default(cuid())
  content   String     @db.Text
  author    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parentId  String?
  assignee  String?
  parent    Feedback?  @relation("FeedbackReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Feedback[] @relation("FeedbackReplies")

  @@index([parentId])
}

model Challenge {
  id            String   @id
  nameKo        String
  nameEn        String
  nameId        String
  descriptionKo String?  @db.Text
  descriptionEn String?  @db.Text
  descriptionId String?  @db.Text
  targetCount   Int      @default(0)
  reward        Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([id], map: "Challenge_id_key")
}
